Html
```
{{ for item in model.data }}
<div class="news-block_two col-md-6 col-sm-12">
    <div class="news-block_two-inner">
        <div class="news-block_two-image">
            <a href="/tin-tuc/{{ item.slug }}-{{ item.id }}">
                <img src="{{ item.thumbnailUrl }}" alt="{{ item.title }}" />
            </a>
        </div>
        <div class="news-block_two-content">
            <div class="news-block_two-title">{{ item.createdAtText }}</div>
            <h5 class="news-block_two-heading">
                <a href="/tin-tuc/{{ item.slug }}-{{ item.id }}" class="text-ellipsis-3">{{ item.title }}</a>
            </h5>
            <ul class="news-block_two-meta">
                <li><span class="icon fa fa-user"></span>{{ item.author.name }}</li>
            </ul>
        </div>
    </div>
</div>
{{ end }}

<div class="col-12">
    <!--componentHtml:Pagination page='{{ model.page }}' size='{{ model.size }}' total='{{ model.total }}' url='tin-tuc'-->
</div>
```
Script
```
// Lấy service
var _currentUserContext = Services.GetRequiredService<ICurrentUserContext>();
var _blogService = Services.GetRequiredService<IBlogService>();
var _mapper = Services.GetRequiredService<IMapper>();
var _userRefService = Services.GetRequiredService<IUserReferenceService>(); // Nếu muốn enrich Author

// Culture & Timezone
var culture = _currentUserContext.CountryCode;
var timezone = _currentUserContext.TimeZone;

// Phân trang
var query = HttpContext.Request.Query;
var page = Params.ContainsKey("page") ? Convert.ToInt32(Params["page"])
    : (query.ContainsKey("page") ? Convert.ToInt32(query["page"]) : 1);
var size = Params.ContainsKey("size") ? Convert.ToInt32(Params["size"])
    : (query.ContainsKey("size") ? Convert.ToInt32(query["size"]) : 10);

// Lấy translations đã fallback (đã chọn đúng language)
var (translations, total) = await _blogService.GetTranslationsWithFallbackAsync(page, size);

// Map tránh vòng lặp navigation
var mappedTranslations = _mapper.Map<List<BlogTranslationModel>>(translations) ?? new();

// Format thời gian
foreach (var model in mappedTranslations)
{
    model.CreatedAtText = model.CreatedAt.FormatDateTime(culture, timezone);
    model.UpdatedAtText = model.UpdatedAt.FormatDateTime(culture, timezone);
}

// Enrich Author nếu cần
var authorIds = mappedTranslations.Select(x => x.AuthorId).Where(x => x != Guid.Empty).Distinct().ToList();
var authorDict = new Dictionary<Guid, UserModel>();
var authorTasks = authorIds.Select(async id =>
{
    var user = await _userRefService.GetUserAsync(id);
    authorDict[id] = user;
});
await Task.WhenAll(authorTasks);

// Gán Author
foreach (var item in mappedTranslations)
{
    item.Author = authorDict.GetValueOrDefault(item.AuthorId) ?? new UserModel();
}

// Chuyển sang items camelCase
var items = mappedTranslations.Select(AppExtensions.ObjectToCamelCase).ToList();

// Trả kết quả cho Scriban
return new
{
    data = items,
    page = page,
    size = size,
    total = total
};
```