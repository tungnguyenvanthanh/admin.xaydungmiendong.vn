Html
```
{{ if model.isFooter == false }}
	<div class="widget-content">
		<h5 class="sidebar-widget_title">Tin tức gần đây</h5>

      	{{ for item in model.items }}
          	<div class="post">
				<div class="thumb img-cover-container">
					<a href="/tin-tuc/{{ item.slug }}-{{ item.blogId }}" class="h-100">
						<img src="{{ item.thumbnailUrl }}" alt="{{ item.title }}">
					</a>
				</div>
				<div class="post-date">{{ item.createdAtText }}</div>
				<h6>
					<a href="/tin-tuc/{{ item.slug }}-{{ item.blogId }}" class="text-ellipsis-2">{{ item.title }}</a>
				</h6>
			</div>
      	{{ end }}
	</div>
{{ else }}
	<div class="footer-widget post-widget">
		<h5 class="footer-title">Tin tức gần đây</h5>

		{{ for item in model.items }}
			<div class="news-widget-block">
				<div class="news-widget_image img-cover-container">
					<img src="{{ item.thumbnailUrl }}" alt="{{ item.title }}" />
				</div>
				<div class="news-widget_post-date">{{ item.createdAtText }}</div>
				<h6 class="news-widget_title">
					<a href="/tin-tuc/{{ item.slug }}-{{ item.blogId }}" class="text-ellipsis-2">{{ item.title }}</a>
				</h6>
			</div>
		{{ end }}
	</div>
{{ end }}
```
Script
```
// Lấy service
var _currentUserContext = Services.GetRequiredService<ICurrentUserContext>();
var _blogService = Services.GetRequiredService<IBlogService>();
var _mapper = Services.GetRequiredService<IMapper>();
var _userRefService = Services.GetRequiredService<IUserReferenceService>(); // Nếu muốn enrich Author

var size = Params.ContainsKey("size") ? Convert.ToInt32(Params["size"]) : 3;
var isFooter = Params.ContainsKey("isFooter") ? bool.Parse(Params["isFooter"].ToString()) : false;

var result = new Scriban.Runtime.ScriptObject();

result.Add("isFooter", isFooter);

// Culture & Timezone
var culture = _currentUserContext.CountryCode;
var timezone = _currentUserContext.TimeZone;

// Lấy translations đã fallback (đã chọn đúng language)
var (translations, total) = await _blogService.GetTranslationsWithFallbackAsync(1, size);

// Map tránh vòng lặp navigation
var mappedTranslations = _mapper.Map<List<BlogTranslationModel>>(translations) ?? new();

// Format thời gian
foreach (var model in mappedTranslations)
{
    model.CreatedAtText = model.CreatedAt.FormatDateTime(culture, timezone);
}

// Chuyển sang items camelCase
var items = mappedTranslations.Select(AppExtensions.ObjectToCamelCase).ToList();

result.Add("items", items);

// Trả kết quả cho Scriban
return result;
```